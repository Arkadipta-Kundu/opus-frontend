openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /user/{id}:
    get:
      tags:
      - user-controller
      operationId: getById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
    put:
      tags:
      - user-controller
      operationId: updateUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    delete:
      tags:
      - user-controller
      operationId: delteUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /tasks/{id}:
    get:
      tags:
      - task-controller
      operationId: getTaskById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Task"
    put:
      tags:
      - task-controller
      operationId: updateTask
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    delete:
      tags:
      - task-controller
      operationId: deleteTask
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /tasks:
    get:
      tags:
      - task-controller
      operationId: getTasksForLoggedInUser
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
    post:
      tags:
      - task-controller
      operationId: createTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /auth/user-varification/verify:
    post:
      tags:
      - auth-controller
      operationId: verifyOtp
      parameters:
      - name: otp
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /auth/user-varification/send:
    post:
      tags:
      - auth-controller
      operationId: sendOtp
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /auth/user-varification/reset-password:
    post:
      tags:
      - auth-controller
      operationId: resetPassword
      parameters:
      - name: token
        in: query
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /auth/user-varification/login:
    post:
      tags:
      - auth-controller
      operationId: login
      parameters:
      - name: userName
        in: query
        required: true
        schema:
          type: string
      - name: password
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /auth/user-varification/forget-password:
    post:
      tags:
      - auth-controller
      operationId: forgetPassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /auth/create-user:
    post:
      tags:
      - auth-controller
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
  /admin/create-admin:
    post:
      tags:
      - admin-controller
      operationId: createAdmin
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /public/health:
    get:
      tags:
      - public-controller
      operationId: healthCheck
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties: {}
  /auth/user-varification/is-verified:
    get:
      tags:
      - auth-controller
      operationId: isEmailVerified
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /admin/users:
    get:
      tags:
      - admin-controller
      operationId: getAllUsers
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
  /admin/users/{id}:
    get:
      tags:
      - admin-controller
      operationId: getUserById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
    delete:
      tags:
      - admin-controller
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /admin/tasks:
    get:
      tags:
      - admin-controller
      operationId: getAllTasks
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
components:
  schemas:
    Task:
      type: object
      properties:
        taskId:
          type: integer
          format: int64
        taskTitle:
          type: string
        taskDesc:
          type: string
        date:
          type: string
          format: date-time
        taskStatus:
          type: string
          enum:
          - TODO
          - IN_PROGRESS
          - DONE
        user:
          $ref: "#/components/schemas/User"
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        userName:
          type: string
        roles:
          type: array
          items:
            type: string
        email:
          type: string
        password:
          type: string
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/Task"
        emailVerified:
          type: boolean
